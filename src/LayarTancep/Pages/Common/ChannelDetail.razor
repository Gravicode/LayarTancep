@using LayarTancep.Models
@using LayarTancep.Data
@inject IJSRuntime jsRuntime
@using System.IO
@inject IToastService toastService
@inject ChannelService service
@inject UserProfileService UserSvc
@inject AzureBlobHelper AzureBlobHelper


<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="judul">Name</label>
                        <input type="hidden" @bind-value="@TaskObject.Id" />
                        @if (TaskObject.Id <= 0)
                        {
                            <InputText id="judul" class="form-control" @bind-Value="@TaskObject.Name" />
                            <ValidationMessage For="@(() => TaskObject.Name)" />
                        }
                        else
                        {
                            <b>@TaskObject.Name</b>
                        }
                    </div>

                    <div class="form-group">
                        <label for="kategori">Kategori</label>
                        <select @bind="TaskObject.Category" id="kategori" class="custom-select">
                            <option value="-">Pilih</option>
                            @foreach(var cat in ChannelCategories.Categories){
                            <option value="@cat">@cat</option>
                            }

                        </select>
                        <ValidationMessage For="@(() => TaskObject.Category)" />
                    </div>

                    <div class="form-group">
                        <label for="desc">Deskripsi</label>
                        <InputTextArea id="desc" class="form-control" @bind-Value="@TaskObject.Desc" />
                        <ValidationMessage For="@(() => TaskObject.Desc)" />
                    </div>

                    <div class="form-group">
                        <label for="Facebook">Facebook</label>
                        <InputText id="Facebook" class="form-control" @bind-Value="@TaskObject.Facebook" />
                        <ValidationMessage For="@(() => TaskObject.Facebook)" />
                    </div>
                    <div class="form-group">
                        <label for="Google">Google</label>
                        <InputText id="Google" class="form-control" @bind-Value="@TaskObject.Google" />
                        <ValidationMessage For="@(() => TaskObject.Google)" />
                    </div>
                    <div class="form-group">
                        <label for="Twitter">Twitter</label>
                        <InputText id="Twitter" class="form-control" @bind-Value="@TaskObject.Twitter" />
                        <ValidationMessage For="@(() => TaskObject.Twitter)" />
                    </div>
                    <div class="form-group">
                        <label for="filePicChannel">Profile Picture</label>
                        <InputFile class="uploadButton-input" id="filePicChannel" accept="image/*" multiple OnChange="UploadFiles" />
                        @if (string.IsNullOrEmpty(TaskObject.PicUrl))
                        {
                            <span class="alert alert-info">Pilih Gambar</span>
                        }
                        else
                        {
                            <span class="alert alert-success">Gambar sudah dipilih</span>
                        }
                    </div>
                    <div class="form-group">
                        <label for="filePicChannel2">Background Picture</label>
                        <InputFile class="uploadButton-input" id="filePicChannel2" accept="image/*" multiple OnChange="UploadFiles2" />
                        @if (string.IsNullOrEmpty(TaskObject.BackgroundPicUrl))
                        {
                            <span class="alert alert-info">Pilih Gambar</span>
                        }
                        else
                        {
                            <span class="alert alert-success">Gambar sudah dipilih</span>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    public UserProfile SelUser { get; set; }
    string UserName { set; get; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    public string FileUrl { get; set; }
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public Channel TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);

        }

    }
    private async void HandleValidSubmit()
    {


        if (TaskObject.Id == 0)
        {
            if (service.IsChannelExist(TaskObject.Name))
            {
                toastService.ShowError("Channel sudah ada, pilih nama lain.");
                return;
            }
            service.InsertData(TaskObject);

        }
        else
        {

            service.UpdateData(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }



    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var fileurls = new List<string>();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {

            //var file = e.File;
            if (file != null)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                var bytes = ms.ToArray();
                //var bytes = SKiaImageHelper.FixedSize(ms, 900, 500, false);
                string newName = string.Empty;

                newName = $"ChannelPic_{(string.IsNullOrEmpty(SelUser.Username) ? "rojul" : SelUser.Username)}_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
                var FileUrl = $"{AppConstants.UploadUrlPrefix}{newName}";
                await AzureBlobHelper.UploadFile(newName, bytes);
                fileurls.Add(FileUrl);

            }
            break;
        }
        TaskObject.PicUrl = string.Join(';', fileurls);
    } 
    private async Task UploadFiles2(InputFileChangeEventArgs e)
    {
        var fileurls = new List<string>();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {

            //var file = e.File;
            if (file != null)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                var bytes = ms.ToArray();
                //var bytes = SKiaImageHelper.FixedSize(ms, 900, 500, false);
                string newName = string.Empty;

                newName = $"ChannelBackPic_{(string.IsNullOrEmpty(SelUser.Username) ? "rojul" : SelUser.Username)}_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
                var FileUrl = $"{AppConstants.UploadUrlPrefix}{newName}";
                await AzureBlobHelper.UploadFile(newName, bytes);
                fileurls.Add(FileUrl);

            }
            break;
        }
        TaskObject.BackgroundPicUrl = string.Join(';', fileurls);
    }

}