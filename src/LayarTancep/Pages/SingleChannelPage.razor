@page "/single-channel"
@page "/single-channel/{ChannelId:long}"
@inject IJSRuntime IJS
@inject NavigationManager NavMgr
@inject IToastService toastService

@inject ChannelService ChannelSvc
@inject PostService PostSvc
@inject UserProfileService UserSvc


<div class="single-channel-image">
    <img class="img-fluid" alt="" src="img/channel-banner.png">
    <div class="channel-profile">
        <img class="channel-profile-img" alt="" src="@(string.IsNullOrEmpty(CurrentChannel?.PicUrl)?"img/s2.png":CurrentChannel?.PicUrl)">
        <div class="social hidden-xs">
            Social &nbsp;
            <a class="fb" href="@($"facebook.com/{CurrentChannel?.Facebook}")">Facebook</a>
            <a class="tw" href="@($"twitter.com/{CurrentChannel?.Twitter}")">Twitter</a>
            <a class="gp" href="@($"google.com/q={CurrentChannel?.Google}")">Google</a>
        </div>
    </div>
</div>
<div class="single-channel-nav">
    <nav class="navbar navbar-expand-lg navbar-light">
        <a class="channel-brand" href="#">@CurrentChannel?.Name <span title="" data-placement="top" data-toggle="tooltip" data-original-title="Verified"><i class="fas fa-check-circle text-success"></i></span></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Videos <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Playlist</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Channels</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Discussion</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Donate
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#">Action</a>
                        <a class="dropdown-item" href="#">Another action</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Something else here</a>
                    </div>
                </li>
            </ul>
            <form class="form-inline my-2 my-lg-0">
                <input class="form-control form-control-sm mr-sm-1" @bind="Keyword" type="search" placeholder="Search" aria-label="Search"><button @onclick="Search" class="btn btn-outline-success btn-sm my-2 my-sm-0" type="submit"><i class="fas fa-search"></i></button> &nbsp;&nbsp;&nbsp; <button class="btn btn-outline-danger btn-sm" @onclick="ToggleSubscribe" type="button">@((Subscribed? "Subscribed": "Subscribe")) <strong>@(CurrentChannel == null ? 0 : NumberHelper.FormatNumber(CurrentChannel.Subscribers.Count))</strong></button>
            </form>
        </div>
    </nav>
</div>
<div class="container-fluid">
    <div class="video-block section-padding">
        <div class="row">
            <div class="col-md-12">
                <div class="main-title">
                    <div class="btn-group float-right right-action">
                        <a href="#" class="right-action-link text-gray" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Sort by <i class="fa fa-caret-down" aria-hidden="true"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="#"><i class="fas fa-fw fa-star"></i> &nbsp; Top Rated</a>
                            <a class="dropdown-item" href="#"><i class="fas fa-fw fa-signal"></i> &nbsp; Viewed</a>
                            <a class="dropdown-item" href="#"><i class="fas fa-fw fa-times-circle"></i> &nbsp; Close</a>
                        </div>
                    </div>
                    <h6>Videos</h6>
                </div>
            </div>
            <Virtualize Items="@ListVideo" Context="item">
                <div @key="item.Id" class="col-xl-3 col-sm-6 mb-3">
                    <div class="video-card">
                        <div class="video-card-image">
                            <a class="play-icon" href="@($"video-page/{item.Id}")"><i class="fas fa-play-circle"></i></a>
                            <a href="@($"video-page/{item.Id}")"><img class="img-fluid" src="@(string.IsNullOrEmpty(item.ImageUrls)?"img/v1.png":item.ImageUrls)" alt=""></a>
                            <div class="time">@(item.Duration != null ? $"{item.Duration.Value.Hours}:{item.Duration.Value.Minutes}:{item.Duration.Value.Seconds}" : "00:00")</div>
                        </div>
                        <div class="video-card-body">
                            <div class="video-title">
                                <a href="@($"video-page/{item.Id}")">@item.Title</a>
                            </div>
                            <div class="video-page text-success">
                                @item.Category  <a title="" data-placement="top" data-toggle="tooltip" href="#" data-original-title="Verified"><i class="fas fa-check-circle text-success"></i></a>
                            </div>
                            <div class="video-view">
                                @NumberHelper.FormatNumber(item.PostViews.Count) views &nbsp;<i class="fas fa-calendar-alt"></i> @DateHelper.GetElapsedTime(item.CreatedDate)
                            </div>
                        </div>
                    </div>
                </div>

            </Virtualize>
           

        </div>
        <nav style="display:none;" aria-label="Page navigation example">
            <ul class="pagination justify-content-center pagination-sm mb-0">
                <li class="page-item disabled">
                    <a tabindex="-1" href="#" class="page-link">Previous</a>
                </li>
                <li class="page-item active"><a href="#" class="page-link">1</a></li>
                <li class="page-item"><a href="#" class="page-link">2</a></li>
                <li class="page-item"><a href="#" class="page-link">3</a></li>
                <li class="page-item">
                    <a href="#" class="page-link">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>
@code {

    public string Keyword { get; set; }
    public Channel itemObject { get; set; } = new();
    public UserProfile SelUser { get; set; }
    string UserName { set; get; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public List<Post> ListVideo { get; set; } = new();
    public bool Subscribed { get; set; }
    bool HasLogin = false;

    public Channel CurrentChannel { get; set; }

    [Parameter]
    public long ChannelId { get; set; }
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (Layout != null) Layout.AdditionalCss = "single-channel-page";
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);
            HasLogin = true;
        }

        if (ChannelId <= 0)
        {
            var mychannels = ChannelSvc.GetByUser(SelUser);
            if (mychannels.Any()) ChannelId = mychannels.First().Id;
        }
        if (ChannelId <= 0)
        {
            var randomchanel = ChannelSvc.GetLatest(FilterChannels.TopRated, 1);
            if (randomchanel.Any()) ChannelId = randomchanel.First().Id;
        }
        if (ChannelId <= 0)
        {
            NavMgr.NavigateTo("/");
            toastService.ShowInfo("Please select specific channel");
        }
        else
        {
            LoadData();
        }
    }

    private async void DataChanged()
    {
        LoadData();
        StateHasChanged();
    }



    async void LoadData()
    {
        CurrentChannel = ChannelSvc.GetDataById(ChannelId);
        Subscribed = CurrentChannel.Subscribers.Any(x => x.UserId == SelUser.Id);
        await Search();
    }

    async Task OpenChannel(Channel item)
    {
        NavMgr.NavigateTo($"/single-channel/{item.Id}");
    }

    async Task ToggleSubscribe()
    {
        if (!HasLogin)
        {
            toastService.ShowWarning("Please login first.");
            return;
        }
        if (CurrentChannel.UserName == SelUser.Username)
        {
            toastService.ShowWarning("Kamu ga bisa subscribe channel sendiri.");
            return;
        }
        var state = !Subscribed;
        if (state)
        {
            ChannelSvc.Subscribe(SelUser.Id, SelUser.Username, CurrentChannel.Id);
        }
        else
        {
            ChannelSvc.UnSubscribe(SelUser.Id, CurrentChannel.Id);
        }
    }

    async Task Search()
    {
        if (string.IsNullOrEmpty(Keyword))
        {
            ListVideo = CurrentChannel.Posts.ToList();
        }
        else
        {
            ListVideo = CurrentChannel.Posts.Where(x=>x.Title.Contains(Keyword) || x.About.Contains(Keyword)).ToList();
        }
    }
    }

